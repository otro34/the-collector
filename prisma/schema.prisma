// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Collection Types
enum CollectionType {
  VIDEOGAME
  MUSIC
  BOOK
}

// Book subtypes
enum BookType {
  MANGA
  COMIC
  GRAPHIC_NOVEL
  OTHER
}

// Base Item Model (shared fields)
model Item {
  id                  String          @id @default(cuid())
  collectionType      CollectionType
  title               String
  year                Int?
  language            String?
  country             String?
  copies              Int             @default(1)
  description         String?         @db.Text
  coverUrl            String?
  price               Float?
  tags                String          @default("[]") // JSON string array
  customFields        Json?           // Flexible JSON for type-specific data

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  // Relationships
  videogame           Videogame?
  music               Music?
  book                Book?

  @@index([collectionType])
  @@index([title])
  @@index([year])
  @@index([createdAt])
  @@index([collectionType, year])
  @@index([collectionType, createdAt])
}

// Video Game specific fields
model Videogame {
  id                  String          @id @default(cuid())
  itemId              String          @unique
  item                Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)

  platform            String
  publisher           String?
  developer           String?
  region              String?
  edition             String?
  genres              String          @default("[]") // JSON string array
  metacriticScore     Int?

  @@index([platform])
  @@index([publisher])
  @@index([developer])
}

// Music specific fields (vinyl/CD)
model Music {
  id                  String          @id @default(cuid())
  itemId              String          @unique
  item                Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)

  artist              String
  publisher           String?
  format              String          // CD, Vinyl, etc.
  discCount           String?
  genres              String          @default("[]") // JSON string array
  tracklist           String?         @db.Text

  @@index([artist])
  @@index([format])
  @@index([publisher])
}

// Book specific fields (manga, comics, etc.)
model Book {
  id                  String          @id @default(cuid())
  itemId              String          @unique
  item                Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)

  type                BookType
  author              String
  volume              String?
  series              String?
  publisher           String?
  coverType           String?
  genres              String          @default("[]") // JSON string array

  @@index([type])
  @@index([author])
  @@index([series])
  @@index([publisher])
}

// Backup tracking
model Backup {
  id                  String          @id @default(cuid())
  filename            String
  size                Int             // bytes
  itemCount           Int
  location            String          // local path or cloud URL
  type                String          // 'manual', 'scheduled', 'csv_export'
  createdAt           DateTime        @default(now())
}

// App settings
model Settings {
  id                  String          @id @default(cuid())
  key                 String          @unique
  value               Json            // JSON value
  updatedAt           DateTime        @updatedAt
}

// User roles
enum UserRole {
  ADMIN
  USER
}

// Authorized Users (allowlist)
model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  githubUsername      String?         @unique
  name                String?
  image               String?
  role                UserRole        @default(USER)
  isActive            Boolean         @default(true)
  lastLoginAt         DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([email])
  @@index([githubUsername])
}